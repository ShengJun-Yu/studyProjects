package demo34Thread.ThreadSafeSolve.Solve02SynchronizedMethod;

/**
 * @author : Bojack
 * @date : Created in 20:23 2021.12.11
 * 卖票案例出现了线程安全问题
 * 卖出了不存在的票和重复的票
 * <p>
 * 解决线程安全问题的二种方案:使用同步方法
 * 使用步骤:
 * 1.把访问了共享数据的代码抽取出来,放到一个方法中
 * 2.在方法上添加synchronized修饰符
 * <p>
 * 格式:定义方法的格式
 * 修饰符 synchronized 返回值类型 方法名(参数列表){
 * 可能会出现线程安全问题的代码(访问了共享数据的代码)
 * }
 */
public class SellTicket implements Runnable {
    private static int ticket = 100;

    @Override
    public void run() {
        while (true) {
            sell();
        }
    }

    /*
    静态的同步方法
    锁对象是谁?
    不能是this
            this是创建对象之后产生的,静态方法优先于对象
    静态方法的锁对象是本类的class属性-->class文件对象(反射)
     */
    public static /*synchronized*/ void sellStatic() {
        synchronized (Thread.class) {
            if (ticket > 0) {
                System.out.println(Thread.currentThread().getName() + "==》正在卖第" + ticket + "张票");
                ticket--;
            }
        }
    }
    /*
    定义一个同步方法shu();
        同步方法也会把方法内部的代码锁住
        只让一个线程执行
        同步方法的锁对象是谁?
        就是实现类对象 new RunnableImpl()
        也是就是this
     */
    public /*synchronized*/ void sell() {
        synchronized (this) {
            if (ticket > 0) {
                System.out.println(Thread.currentThread().getName() + "==》正在卖第" + ticket + "张票");
                ticket--;
            }
        }
    }
}
